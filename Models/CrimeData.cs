// <auto-generated />
//
// To parse this JSON data, add NuGet 'Newtonsoft.Json' then do:
//
//    using NewYorkCityCrimeData;
//
//    var crimeData = CrimeData.FromJson(jsonString);

namespace NewYorkCityCrimeData
{
    using System;
    using System.Collections.Generic;

    using System.Globalization;
    using Newtonsoft.Json;
    using Newtonsoft.Json.Converters;
    using System.Runtime.Serialization;

    [DataContract]
    public partial class CrimeData
    {
        [JsonProperty("id")]
        [JsonConverter(typeof(ParseStringConverter))]
        public long Id { get; set; }

        [JsonProperty("building_code")]
        public string BuildingCode { get; set; }

        [JsonProperty("dbn", NullValueHandling = NullValueHandling.Ignore)]
        public string Dbn { get; set; }

        [JsonProperty("location_name")]
        public string LocationName { get; set; }

        [JsonProperty("location_code", NullValueHandling = NullValueHandling.Ignore)]
        public string LocationCode { get; set; }

        [JsonProperty("address")]
        public string Address { get; set; }

        [JsonProperty("borough")]
        public Borough Borough { get; set; }

        [JsonProperty("geographical_district_code")]
        [JsonConverter(typeof(ParseStringConverter))]
        public long GeographicalDistrictCode { get; set; }

        [JsonProperty("register")]
        public string Register { get; set; }

        [JsonProperty("schools")]
        [JsonConverter(typeof(ParseStringConverter))]
        public long Schools { get; set; }

        [JsonProperty("schools_in_building")]
        public string SchoolsInBuilding { get; set; }

        [DataMember]
        [JsonProperty("major_n")]
        public MajorN MajorN { get; set; }

        [DataMember]
        [JsonProperty("oth_n")]
        public MajorN OthN { get; set; }

        [DataMember]
        [JsonProperty("nocrim_n")]
        public MajorN NocrimN { get; set; }

        [DataMember]
        [JsonProperty("prop_n")]
        public MajorN PropN { get; set; }

        [DataMember]
        [JsonProperty("vio_n")]
        public MajorN VioN { get; set; }

        [JsonProperty("engroupa")]
        public Engroupa Engroupa { get; set; }

        [JsonProperty("rangea")]
        public Rangea Rangea { get; set; }

        [JsonProperty("avgofmajor_n")]
        public AvgofmajorN AvgofmajorN { get; set; }

        [JsonProperty("avgofoth_n")]
        public AvgofothN AvgofothN { get; set; }

        [JsonProperty("avgofnocrim_n")]
        public AvgofnocrimN AvgofnocrimN { get; set; }

        [JsonProperty("avgofprop_n")]
        public AvgofpropN AvgofpropN { get; set; }

        [JsonProperty("avgofvio_n")]
        public AvgofvioN AvgofvioN { get; set; }

        [JsonProperty("geocoded_column")]
        public GeocodedColumn GeocodedColumn { get; set; }

        [JsonProperty(":@computed_region_efsh_h5xi")]
        [JsonConverter(typeof(ParseStringConverter))]
        public long ComputedRegionEfshH5Xi { get; set; }

        [JsonProperty(":@computed_region_f5dn_yrer", NullValueHandling = NullValueHandling.Ignore)]
        [JsonConverter(typeof(ParseStringConverter))]
        public long? ComputedRegionF5DnYrer { get; set; }

        [JsonProperty(":@computed_region_yeji_bk3q", NullValueHandling = NullValueHandling.Ignore)]
        [JsonConverter(typeof(ParseStringConverter))]
        public long? ComputedRegionYejiBk3Q { get; set; }

        [JsonProperty(":@computed_region_92fq_4b7q", NullValueHandling = NullValueHandling.Ignore)]
        [JsonConverter(typeof(ParseStringConverter))]
        public long? ComputedRegion92Fq4B7Q { get; set; }

        [JsonProperty(":@computed_region_sbqj_enih", NullValueHandling = NullValueHandling.Ignore)]
        [JsonConverter(typeof(ParseStringConverter))]
        public long? ComputedRegionSbqjEnih { get; set; }

        [JsonProperty("building_name", NullValueHandling = NullValueHandling.Ignore)]
        public string BuildingName { get; set; }
    }
    [DataContract]
    public partial class GeocodedColumn
    {
        [JsonProperty("type")]
        public TypeEnum Type { get; set; }

        [JsonProperty("coordinates")]
        public double[] Coordinates { get; set; }
    }
    [DataContract]
    public enum AvgofmajorN { NA, The025, The026, The038, The045, The061, The065, The109, The121, The135, The167 };
    [DataContract]
    public enum AvgofnocrimN { NA, The1133, The169, The1850, The222, The2293, The241, The2536, The388, The610, The671, The714 };
    [DataContract]
    public enum AvgofothN { NA, The088, The103, The113, The152, The255, The279, The295, The473, The733, The743, The991 };
    [DataContract]
    public enum AvgofpropN { NA, The055, The057, The066, The083, The129, The148, The246, The329, The433, The500 };
    [DataContract]
    public enum AvgofvioN { NA, The045, The057, The058, The091, The147, The148, The160, The292, The333, The373, The429 };
    [DataContract]
    public enum Borough { K, M, Q, R, X };
    [DataContract]
    public enum Engroupa { NA, The10C, The11C, The12C, The13C, The2C, The3C, The4C, The5C, The6C, The7C, The8C, The9C };
    [DataContract]
    public enum TypeEnum { Point };
    [DataContract]
    public enum Rangea { NA, The10011250, The1250, The12511500, The15011750, The17512000, The20012500, The25013000, The251500, The30014000, The4000, The501750, The7511000 };

    public partial struct MajorN
    {
        public Engroupa? Enum;
        public long? Integer;

        public static implicit operator MajorN(Engroupa Enum) => new MajorN { Enum = Enum };
        public static implicit operator MajorN(long Integer) => new MajorN { Integer = Integer };
    }

    public partial class CrimeData
    {
        public static CrimeData[] FromJson(string json) => JsonConvert.DeserializeObject<CrimeData[]>(json, NewYorkCityCrimeData.Converter.Settings);
    }
    [DataContract]
    public static class Serialize
    {
        public static string ToJson(this CrimeData[] self) => JsonConvert.SerializeObject(self, NewYorkCityCrimeData.Converter.Settings);
    }
    [DataContract]
    internal static class Converter
    {
        public static readonly JsonSerializerSettings Settings = new JsonSerializerSettings
        {
            MetadataPropertyHandling = MetadataPropertyHandling.Ignore,
            DateParseHandling = DateParseHandling.None,
            Converters =
            {
                AvgofmajorNConverter.Singleton,
                AvgofnocrimNConverter.Singleton,
                AvgofothNConverter.Singleton,
                AvgofpropNConverter.Singleton,
                AvgofvioNConverter.Singleton,
                BoroughConverter.Singleton,
                EngroupaConverter.Singleton,
                TypeEnumConverter.Singleton,
                MajorNConverter.Singleton,
                RangeaConverter.Singleton,
                new IsoDateTimeConverter { DateTimeStyles = DateTimeStyles.AssumeUniversal }
            },
        };
    }
    [DataContract]
    internal class ParseStringConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(long) || t == typeof(long?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            long l;
            if (Int64.TryParse(value, out l))
            {
                return l;
            }
            throw new Exception("Cannot unmarshal type long");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (long)untypedValue;
            serializer.Serialize(writer, value.ToString());
            return;
        }

        public static readonly ParseStringConverter Singleton = new ParseStringConverter();
    }
    [DataContract]
    internal class AvgofmajorNConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(AvgofmajorN) || t == typeof(AvgofmajorN?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            switch (value)
            {
                case "0.25":
                    return AvgofmajorN.The025;
                case "0.26":
                    return AvgofmajorN.The026;
                case "0.38":
                    return AvgofmajorN.The038;
                case "0.45":
                    return AvgofmajorN.The045;
                case "0.61":
                    return AvgofmajorN.The061;
                case "0.65":
                    return AvgofmajorN.The065;
                case "1.09":
                    return AvgofmajorN.The109;
                case "1.21":
                    return AvgofmajorN.The121;
                case "1.35":
                    return AvgofmajorN.The135;
                case "1.67":
                    return AvgofmajorN.The167;
                case "N/A":
                    return AvgofmajorN.NA;
            }
            throw new Exception("Cannot unmarshal type AvgofmajorN");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (AvgofmajorN)untypedValue;
            switch (value)
            {
                case AvgofmajorN.The025:
                    serializer.Serialize(writer, "0.25");
                    return;
                case AvgofmajorN.The026:
                    serializer.Serialize(writer, "0.26");
                    return;
                case AvgofmajorN.The038:
                    serializer.Serialize(writer, "0.38");
                    return;
                case AvgofmajorN.The045:
                    serializer.Serialize(writer, "0.45");
                    return;
                case AvgofmajorN.The061:
                    serializer.Serialize(writer, "0.61");
                    return;
                case AvgofmajorN.The065:
                    serializer.Serialize(writer, "0.65");
                    return;
                case AvgofmajorN.The109:
                    serializer.Serialize(writer, "1.09");
                    return;
                case AvgofmajorN.The121:
                    serializer.Serialize(writer, "1.21");
                    return;
                case AvgofmajorN.The135:
                    serializer.Serialize(writer, "1.35");
                    return;
                case AvgofmajorN.The167:
                    serializer.Serialize(writer, "1.67");
                    return;
                case AvgofmajorN.NA:
                    serializer.Serialize(writer, "N/A");
                    return;
            }
            throw new Exception("Cannot marshal type AvgofmajorN");
        }

        public static readonly AvgofmajorNConverter Singleton = new AvgofmajorNConverter();
    }
    [DataContract]
    internal class AvgofnocrimNConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(AvgofnocrimN) || t == typeof(AvgofnocrimN?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            switch (value)
            {
                case "1.69":
                    return AvgofnocrimN.The169;
                case "11.33":
                    return AvgofnocrimN.The1133;
                case "18.50":
                    return AvgofnocrimN.The1850;
                case "2.22":
                    return AvgofnocrimN.The222;
                case "2.41":
                    return AvgofnocrimN.The241;
                case "22.93":
                    return AvgofnocrimN.The2293;
                case "25.36":
                    return AvgofnocrimN.The2536;
                case "3.88":
                    return AvgofnocrimN.The388;
                case "6.10":
                    return AvgofnocrimN.The610;
                case "6.71":
                    return AvgofnocrimN.The671;
                case "7.14":
                    return AvgofnocrimN.The714;
                case "N/A":
                    return AvgofnocrimN.NA;
            }
            throw new Exception("Cannot unmarshal type AvgofnocrimN");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (AvgofnocrimN)untypedValue;
            switch (value)
            {
                case AvgofnocrimN.The169:
                    serializer.Serialize(writer, "1.69");
                    return;
                case AvgofnocrimN.The1133:
                    serializer.Serialize(writer, "11.33");
                    return;
                case AvgofnocrimN.The1850:
                    serializer.Serialize(writer, "18.50");
                    return;
                case AvgofnocrimN.The222:
                    serializer.Serialize(writer, "2.22");
                    return;
                case AvgofnocrimN.The241:
                    serializer.Serialize(writer, "2.41");
                    return;
                case AvgofnocrimN.The2293:
                    serializer.Serialize(writer, "22.93");
                    return;
                case AvgofnocrimN.The2536:
                    serializer.Serialize(writer, "25.36");
                    return;
                case AvgofnocrimN.The388:
                    serializer.Serialize(writer, "3.88");
                    return;
                case AvgofnocrimN.The610:
                    serializer.Serialize(writer, "6.10");
                    return;
                case AvgofnocrimN.The671:
                    serializer.Serialize(writer, "6.71");
                    return;
                case AvgofnocrimN.The714:
                    serializer.Serialize(writer, "7.14");
                    return;
                case AvgofnocrimN.NA:
                    serializer.Serialize(writer, "N/A");
                    return;
            }
            throw new Exception("Cannot marshal type AvgofnocrimN");
        }

        public static readonly AvgofnocrimNConverter Singleton = new AvgofnocrimNConverter();
    }
    [DataContract]
    internal class AvgofothNConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(AvgofothN) || t == typeof(AvgofothN?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            switch (value)
            {
                case "0.88":
                    return AvgofothN.The088;
                case "1.03":
                    return AvgofothN.The103;
                case "1.13":
                    return AvgofothN.The113;
                case "1.52":
                    return AvgofothN.The152;
                case "2.55":
                    return AvgofothN.The255;
                case "2.79":
                    return AvgofothN.The279;
                case "2.95":
                    return AvgofothN.The295;
                case "4.73":
                    return AvgofothN.The473;
                case "7.33":
                    return AvgofothN.The733;
                case "7.43":
                    return AvgofothN.The743;
                case "9.91":
                    return AvgofothN.The991;
                case "N/A":
                    return AvgofothN.NA;
            }
            throw new Exception("Cannot unmarshal type AvgofothN");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (AvgofothN)untypedValue;
            switch (value)
            {
                case AvgofothN.The088:
                    serializer.Serialize(writer, "0.88");
                    return;
                case AvgofothN.The103:
                    serializer.Serialize(writer, "1.03");
                    return;
                case AvgofothN.The113:
                    serializer.Serialize(writer, "1.13");
                    return;
                case AvgofothN.The152:
                    serializer.Serialize(writer, "1.52");
                    return;
                case AvgofothN.The255:
                    serializer.Serialize(writer, "2.55");
                    return;
                case AvgofothN.The279:
                    serializer.Serialize(writer, "2.79");
                    return;
                case AvgofothN.The295:
                    serializer.Serialize(writer, "2.95");
                    return;
                case AvgofothN.The473:
                    serializer.Serialize(writer, "4.73");
                    return;
                case AvgofothN.The733:
                    serializer.Serialize(writer, "7.33");
                    return;
                case AvgofothN.The743:
                    serializer.Serialize(writer, "7.43");
                    return;
                case AvgofothN.The991:
                    serializer.Serialize(writer, "9.91");
                    return;
                case AvgofothN.NA:
                    serializer.Serialize(writer, "N/A");
                    return;
            }
            throw new Exception("Cannot marshal type AvgofothN");
        }

        public static readonly AvgofothNConverter Singleton = new AvgofothNConverter();
    }
    [DataContract]
    internal class AvgofpropNConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(AvgofpropN) || t == typeof(AvgofpropN?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            switch (value)
            {
                case "0.55":
                    return AvgofpropN.The055;
                case "0.57":
                    return AvgofpropN.The057;
                case "0.66":
                    return AvgofpropN.The066;
                case "0.83":
                    return AvgofpropN.The083;
                case "1.29":
                    return AvgofpropN.The129;
                case "1.48":
                    return AvgofpropN.The148;
                case "2.46":
                    return AvgofpropN.The246;
                case "3.29":
                    return AvgofpropN.The329;
                case "4.33":
                    return AvgofpropN.The433;
                case "5.00":
                    return AvgofpropN.The500;
                case "N/A":
                    return AvgofpropN.NA;
            }
            throw new Exception("Cannot unmarshal type AvgofpropN");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (AvgofpropN)untypedValue;
            switch (value)
            {
                case AvgofpropN.The055:
                    serializer.Serialize(writer, "0.55");
                    return;
                case AvgofpropN.The057:
                    serializer.Serialize(writer, "0.57");
                    return;
                case AvgofpropN.The066:
                    serializer.Serialize(writer, "0.66");
                    return;
                case AvgofpropN.The083:
                    serializer.Serialize(writer, "0.83");
                    return;
                case AvgofpropN.The129:
                    serializer.Serialize(writer, "1.29");
                    return;
                case AvgofpropN.The148:
                    serializer.Serialize(writer, "1.48");
                    return;
                case AvgofpropN.The246:
                    serializer.Serialize(writer, "2.46");
                    return;
                case AvgofpropN.The329:
                    serializer.Serialize(writer, "3.29");
                    return;
                case AvgofpropN.The433:
                    serializer.Serialize(writer, "4.33");
                    return;
                case AvgofpropN.The500:
                    serializer.Serialize(writer, "5.00");
                    return;
                case AvgofpropN.NA:
                    serializer.Serialize(writer, "N/A");
                    return;
            }
            throw new Exception("Cannot marshal type AvgofpropN");
        }

        public static readonly AvgofpropNConverter Singleton = new AvgofpropNConverter();
    }
    [DataContract]
    internal class AvgofvioNConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(AvgofvioN) || t == typeof(AvgofvioN?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            switch (value)
            {
                case "0.45":
                    return AvgofvioN.The045;
                case "0.57":
                    return AvgofvioN.The057;
                case "0.58":
                    return AvgofvioN.The058;
                case "0.91":
                    return AvgofvioN.The091;
                case "1.47":
                    return AvgofvioN.The147;
                case "1.48":
                    return AvgofvioN.The148;
                case "1.60":
                    return AvgofvioN.The160;
                case "2.92":
                    return AvgofvioN.The292;
                case "3.33":
                    return AvgofvioN.The333;
                case "3.73":
                    return AvgofvioN.The373;
                case "4.29":
                    return AvgofvioN.The429;
                case "N/A":
                    return AvgofvioN.NA;
            }
            throw new Exception("Cannot unmarshal type AvgofvioN");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (AvgofvioN)untypedValue;
            switch (value)
            {
                case AvgofvioN.The045:
                    serializer.Serialize(writer, "0.45");
                    return;
                case AvgofvioN.The057:
                    serializer.Serialize(writer, "0.57");
                    return;
                case AvgofvioN.The058:
                    serializer.Serialize(writer, "0.58");
                    return;
                case AvgofvioN.The091:
                    serializer.Serialize(writer, "0.91");
                    return;
                case AvgofvioN.The147:
                    serializer.Serialize(writer, "1.47");
                    return;
                case AvgofvioN.The148:
                    serializer.Serialize(writer, "1.48");
                    return;
                case AvgofvioN.The160:
                    serializer.Serialize(writer, "1.60");
                    return;
                case AvgofvioN.The292:
                    serializer.Serialize(writer, "2.92");
                    return;
                case AvgofvioN.The333:
                    serializer.Serialize(writer, "3.33");
                    return;
                case AvgofvioN.The373:
                    serializer.Serialize(writer, "3.73");
                    return;
                case AvgofvioN.The429:
                    serializer.Serialize(writer, "4.29");
                    return;
                case AvgofvioN.NA:
                    serializer.Serialize(writer, "N/A");
                    return;
            }
            throw new Exception("Cannot marshal type AvgofvioN");
        }

        public static readonly AvgofvioNConverter Singleton = new AvgofvioNConverter();
    }
    [DataContract]
    internal class BoroughConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(Borough) || t == typeof(Borough?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            switch (value)
            {
                case "K":
                    return Borough.K;
                case "M":
                    return Borough.M;
                case "Q":
                    return Borough.Q;
                case "R":
                    return Borough.R;
                case "X":
                    return Borough.X;
            }
            throw new Exception("Cannot unmarshal type Borough");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (Borough)untypedValue;
            switch (value)
            {
                case Borough.K:
                    serializer.Serialize(writer, "K");
                    return;
                case Borough.M:
                    serializer.Serialize(writer, "M");
                    return;
                case Borough.Q:
                    serializer.Serialize(writer, "Q");
                    return;
                case Borough.R:
                    serializer.Serialize(writer, "R");
                    return;
                case Borough.X:
                    serializer.Serialize(writer, "X");
                    return;
            }
            throw new Exception("Cannot marshal type Borough");
        }

        public static readonly BoroughConverter Singleton = new BoroughConverter();
    }
    [DataContract]
    internal class EngroupaConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(Engroupa) || t == typeof(Engroupa?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            switch (value)
            {
                case "10C":
                    return Engroupa.The10C;
                case "11C":
                    return Engroupa.The11C;
                case "12C":
                    return Engroupa.The12C;
                case "13C":
                    return Engroupa.The13C;
                case "2C":
                    return Engroupa.The2C;
                case "3C":
                    return Engroupa.The3C;
                case "4C":
                    return Engroupa.The4C;
                case "5C":
                    return Engroupa.The5C;
                case "6C":
                    return Engroupa.The6C;
                case "7C":
                    return Engroupa.The7C;
                case "8C":
                    return Engroupa.The8C;
                case "9C":
                    return Engroupa.The9C;
                case "N/A":
                    return Engroupa.NA;
            }
            throw new Exception("Cannot unmarshal type Engroupa");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (Engroupa)untypedValue;
            switch (value)
            {
                case Engroupa.The10C:
                    serializer.Serialize(writer, "10C");
                    return;
                case Engroupa.The11C:
                    serializer.Serialize(writer, "11C");
                    return;
                case Engroupa.The12C:
                    serializer.Serialize(writer, "12C");
                    return;
                case Engroupa.The13C:
                    serializer.Serialize(writer, "13C");
                    return;
                case Engroupa.The2C:
                    serializer.Serialize(writer, "2C");
                    return;
                case Engroupa.The3C:
                    serializer.Serialize(writer, "3C");
                    return;
                case Engroupa.The4C:
                    serializer.Serialize(writer, "4C");
                    return;
                case Engroupa.The5C:
                    serializer.Serialize(writer, "5C");
                    return;
                case Engroupa.The6C:
                    serializer.Serialize(writer, "6C");
                    return;
                case Engroupa.The7C:
                    serializer.Serialize(writer, "7C");
                    return;
                case Engroupa.The8C:
                    serializer.Serialize(writer, "8C");
                    return;
                case Engroupa.The9C:
                    serializer.Serialize(writer, "9C");
                    return;
                case Engroupa.NA:
                    serializer.Serialize(writer, "N/A");
                    return;
            }
            throw new Exception("Cannot marshal type Engroupa");
        }

        public static readonly EngroupaConverter Singleton = new EngroupaConverter();
    }
    [DataContract]
    internal class TypeEnumConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(TypeEnum) || t == typeof(TypeEnum?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            if (value == "Point")
            {
                return TypeEnum.Point;
            }
            throw new Exception("Cannot unmarshal type TypeEnum");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (TypeEnum)untypedValue;
            if (value == TypeEnum.Point)
            {
                serializer.Serialize(writer, "Point");
                return;
            }
            throw new Exception("Cannot marshal type TypeEnum");
        }

        public static readonly TypeEnumConverter Singleton = new TypeEnumConverter();
    }
    [DataContract]
    internal class MajorNConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(MajorN) || t == typeof(MajorN?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            switch (reader.TokenType)
            {
                case JsonToken.String:
                case JsonToken.Date:
                    var stringValue = serializer.Deserialize<string>(reader);
                    switch (stringValue)
                    {
                        case "10C":
                            return new MajorN { Enum = Engroupa.The10C };
                        case "11C":
                            return new MajorN { Enum = Engroupa.The11C };
                        case "12C":
                            return new MajorN { Enum = Engroupa.The12C };
                        case "13C":
                            return new MajorN { Enum = Engroupa.The13C };
                        case "2C":
                            return new MajorN { Enum = Engroupa.The2C };
                        case "3C":
                            return new MajorN { Enum = Engroupa.The3C };
                        case "4C":
                            return new MajorN { Enum = Engroupa.The4C };
                        case "5C":
                            return new MajorN { Enum = Engroupa.The5C };
                        case "6C":
                            return new MajorN { Enum = Engroupa.The6C };
                        case "7C":
                            return new MajorN { Enum = Engroupa.The7C };
                        case "8C":
                            return new MajorN { Enum = Engroupa.The8C };
                        case "9C":
                            return new MajorN { Enum = Engroupa.The9C };
                        case "N/A":
                            return new MajorN { Enum = Engroupa.NA };
                    }
                    long l;
                    if (Int64.TryParse(stringValue, out l))
                    {
                        return new MajorN { Integer = l };
                    }
                    break;
            }
            throw new Exception("Cannot unmarshal type MajorN");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            var value = (MajorN)untypedValue;
            if (value.Enum != null)
            {
                switch (value.Enum)
                {
                    case Engroupa.The10C:
                        serializer.Serialize(writer, "10C");
                        return;
                    case Engroupa.The11C:
                        serializer.Serialize(writer, "11C");
                        return;
                    case Engroupa.The12C:
                        serializer.Serialize(writer, "12C");
                        return;
                    case Engroupa.The13C:
                        serializer.Serialize(writer, "13C");
                        return;
                    case Engroupa.The2C:
                        serializer.Serialize(writer, "2C");
                        return;
                    case Engroupa.The3C:
                        serializer.Serialize(writer, "3C");
                        return;
                    case Engroupa.The4C:
                        serializer.Serialize(writer, "4C");
                        return;
                    case Engroupa.The5C:
                        serializer.Serialize(writer, "5C");
                        return;
                    case Engroupa.The6C:
                        serializer.Serialize(writer, "6C");
                        return;
                    case Engroupa.The7C:
                        serializer.Serialize(writer, "7C");
                        return;
                    case Engroupa.The8C:
                        serializer.Serialize(writer, "8C");
                        return;
                    case Engroupa.The9C:
                        serializer.Serialize(writer, "9C");
                        return;
                    case Engroupa.NA:
                        serializer.Serialize(writer, "N/A");
                        return;
                }
            }
            if (value.Integer != null)
            {
                serializer.Serialize(writer, value.Integer.Value.ToString());
                return;
            }
            throw new Exception("Cannot marshal type MajorN");
        }

        public static readonly MajorNConverter Singleton = new MajorNConverter();
    }
    [DataContract]
    internal class RangeaConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(Rangea) || t == typeof(Rangea?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            switch (value)
            {
                case "1-250":
                    return Rangea.The1250;
                case "1001-1250":
                    return Rangea.The10011250;
                case "1251-1500":
                    return Rangea.The12511500;
                case "1501-1750":
                    return Rangea.The15011750;
                case "1751-2000":
                    return Rangea.The17512000;
                case "2001-2500":
                    return Rangea.The20012500;
                case "2501-3000":
                    return Rangea.The25013000;
                case "251-500":
                    return Rangea.The251500;
                case "3001-4000":
                    return Rangea.The30014000;
                case "4000+":
                    return Rangea.The4000;
                case "501-750":
                    return Rangea.The501750;
                case "751-1000":
                    return Rangea.The7511000;
                case "N/A":
                    return Rangea.NA;
            }
            throw new Exception("Cannot unmarshal type Rangea");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (Rangea)untypedValue;
            switch (value)
            {
                case Rangea.The1250:
                    serializer.Serialize(writer, "1-250");
                    return;
                case Rangea.The10011250:
                    serializer.Serialize(writer, "1001-1250");
                    return;
                case Rangea.The12511500:
                    serializer.Serialize(writer, "1251-1500");
                    return;
                case Rangea.The15011750:
                    serializer.Serialize(writer, "1501-1750");
                    return;
                case Rangea.The17512000:
                    serializer.Serialize(writer, "1751-2000");
                    return;
                case Rangea.The20012500:
                    serializer.Serialize(writer, "2001-2500");
                    return;
                case Rangea.The25013000:
                    serializer.Serialize(writer, "2501-3000");
                    return;
                case Rangea.The251500:
                    serializer.Serialize(writer, "251-500");
                    return;
                case Rangea.The30014000:
                    serializer.Serialize(writer, "3001-4000");
                    return;
                case Rangea.The4000:
                    serializer.Serialize(writer, "4000+");
                    return;
                case Rangea.The501750:
                    serializer.Serialize(writer, "501-750");
                    return;
                case Rangea.The7511000:
                    serializer.Serialize(writer, "751-1000");
                    return;
                case Rangea.NA:
                    serializer.Serialize(writer, "N/A");
                    return;
            }
            throw new Exception("Cannot marshal type Rangea");
        }

        public static readonly RangeaConverter Singleton = new RangeaConverter();
    }
}
